from fastapi import FastAPI, HTTPException, WebSocket, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import openai
import json
import io

# Initialize FastAPI app
app = FastAPI()

# Set OpenAI API key (replace 'YOUR_API_KEY' with your actual API key)
openai.api_key = "YOUR_API_KEY"

# Define data models for input
class NoteInput(BaseModel):
    note: str

# Function to generate strict JSON output with GPT-4
def generate_strict_json(note: str) -> dict:
    prompt = (
        "Generate a full and valid JSON object with the following fields: "
        "Client, Phase, Immediate_Skill, Immediate_Skill_Benchmark, Next_Level_Growth, "
        "Next_Level_Growth_Benchmark, Long_Term_Development, Long_Term_Development_Benchmark, "
        "Action_Steps, Check_In_Reflections, Delta, Date, Baseline, Milestone. "
        "Ensure all fields are present, even if empty, and provide a valid JSON object in English only. "
        "The response should start with '{' and end with '}'. "
        "Session note: " + note
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo-16k",
            messages=[{"role": "system", "content": "You are a helpful assistant that generates complete and accurate JSON responses in English only."},
                      {"role": "user", "content": prompt}],
            max_tokens=8000,  # Increased to handle large JSON outputs
            temperature=0,
            n=1,
            stop=None
        )

        raw_output = response.choices[0].message.content.strip()

        # Log raw output for debugging
        print("Raw Output from GPT-4:", raw_output)
        print("Output Length:", len(raw_output))

        # Attempt to parse as JSON
        try:
            parsed_output = json.loads(raw_output)
            return parsed_output
        except json.JSONDecodeError:
            return {
                "error": "Invalid JSON format returned by GPT-4.",
                "raw_output": raw_output
            }

    except Exception as e:
        return {"error": str(e)}

# Client Progress & Coach Training Endpoints
@app.post("/parse_note")
def parse_note(note_input: NoteInput):
    print("Received note:", note_input.note)  # Debugging line
    try:
        result = generate_strict_json(note_input.note)
        return JSONResponse(content={"parsed_note": result}, media_type="application/json")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Additional Endpoints for Advanced Features
@app.post("/evaluate_coaching_technique")
def evaluate_coaching_technique():
    pass

@app.post("/add_message")
def add_message():
    pass

@app.post("/add_journal_entry")
def add_journal_entry():
    pass

@app.websocket("/ws/chat")
async def chat_websocket(websocket: WebSocket):
    pass

@app.post("/generate_code")
def generate_code():
    pass

@app.post("/apply_update")
def apply_update():
    pass
